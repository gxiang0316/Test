    我们在写一个功能函数时，经常需要在其中写入与功能不是直接相关但很有必要的代 码，
如日志记录，信息发送，安全和事务支持等，这些枝节性代码虽然是必要的，但它会带来以下麻烦：
    1.枝节性代码游离在功能性代码之外，它不是函数的目的，这是对OO是一种破坏
    2.枝节性代码会造成功能性代码对其它类的依赖，加深类之间的耦合，可重用性降低
    3.从法理上说，枝节性代码应该监视'着功能性代码，然后采取行动，
        而不是功能性代码 通知'枝节性代码采取行动，这好比吟游诗人应该是主动记录骑士的功绩而不是骑士主动要求诗人记录自己的功绩

常见的代理有:
远程代理(Remote Proxy)：对一个位于不同的地址空间对象提供一个局域代表对象，如RMI中的stub

虚拟代理(Virtual Proxy)：根据需要将一个资源消耗很大或者比较复杂的对象，延迟加 载，在真正需要的时候才创建

保护代理(Protect or Access Proxy)：控制对一个对象的访问权限。

智能引用(Smart Reference Proxy)：提供比目标对象额外的服务和功能。

定义
　　代理(Proxy)是一种设计模式,定义：为其他对象提供一个代理以控制对某个对象的访问，
    即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.
　　这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法

　　代理模式的关键点是:代理对象与目标对象.代理对象是对目标对象的扩展,并会调用目标对象
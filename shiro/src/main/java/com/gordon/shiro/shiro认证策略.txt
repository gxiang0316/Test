Authenticator的职责是验证用户帐号，是Shiro API中身份验证核心的入口点：

public AuthenticationInfo authenticate(AuthenticationToken authenticationToken)
            throws AuthenticationException;
如果验证成功，将返回AuthenticationInfo验证信息；此信息中包含了身份及凭证；
如果验证失败将抛出相应的AuthenticationException实现。


SecurityManager接口继承了Authenticator，另外还有一个ModularRealmAuthenticator实现，
其委托给多个Realm进行验证，验证规则通过AuthenticationStrategy接口指定，默认提供的实现：
    FirstSuccessfulStrategy：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；
    AtLeastOneSuccessfulStrategy：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，
                                    返回所有Realm身份验证成功的认证信息；
    AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。


ModularRealmAuthenticator默认使用AtLeastOneSuccessfulStrategy策略。


自定义策略：
    //在所有Realm验证之前调用
    AuthenticationInfo beforeAllAttempts(
                Collection<? extends Realm> realms, AuthenticationToken token)
                throws AuthenticationException;
    //在每个Realm之前调用
    AuthenticationInfo beforeAttempt(
                Realm realm, AuthenticationToken token, AuthenticationInfo aggregate)
                throws AuthenticationException;
    //在每个Realm之后调用
    AuthenticationInfo afterAttempt(
                Realm realm, AuthenticationToken token,
                AuthenticationInfo singleRealmInfo, AuthenticationInfo aggregateInfo, Throwable t)
                throws AuthenticationException;
    //在所有Realm之后调用
    AuthenticationInfo afterAllAttempts(
                AuthenticationToken token, AuthenticationInfo aggregate)
                throws AuthenticationException;

    因为每个AuthenticationStrategy实例都是无状态的，
    所有每次都通过接口将相应的认证信息传入下一次流程；
    通过如上接口可以进行如合并/返回第一个验证成功的认证信息。

